import Button from 'react-bootstrap/Button';
import Col from 'react-bootstrap/Col';
import Form from 'react-bootstrap/Form';
import InputGroup from 'react-bootstrap/InputGroup';
import Row from 'react-bootstrap/Row';
import * as formik from 'formik';
import * as yup from 'yup';
import { v4 as uuidv4 } from 'uuid';
import { useEffect, useState } from 'react';
import Table from 'react-bootstrap/Table';
import { useFormik } from 'formik';

function FormExample() {
  const { Formik } = formik;
  const [Formdata,setFormdata]=useState([])

  const schema = yup.object().shape({
    firstName: yup.string().required(),
    lastName: yup.string().required(),
    username: yup.string().required(),
    city: yup.string().required(),
    state: yup.string().required(),
    DOB: yup.string().required()
  });

  function Formassign(value){
    let unique ={id:uuidv4()}
    let uniquevalue=value
    
     setFormdata([...Formdata,Object.assign(uniquevalue,unique)])
    
    console.log(Formdata)
    
  }

  function Deleteformdata(index){
    setFormdata(Formdata.filter((value,ind)=>{
        return index!==ind
    }))
  }
  function Editformdata(id){
      console.log(id)
  }
  let FormRow=Formdata.map((Formvalue,index)=>{
   // console.log(Formvalue)
    return(
     <tr>
         <td>{Formvalue.firstName}</td>
         <td>{Formvalue.lastName}</td>
         <td>{Formvalue.username}</td>
         <td>{Formvalue.city}</td>
         <td>{Formvalue.state}</td>
         <td>{Formvalue.DOB}</td>
         <td><Button onClick={()=>{Deleteformdata(index)}}>DELETE</Button></td>
         <td><Button onClick={()=>Editformdata(Formvalue.id)}>EDIT</Button></td>
     </tr>
    )
 })


  return (
    <div>
    <Formik
      validationSchema={schema}
      onSubmit={(value)=>{Formassign(value);
      }}
      initialValues={{
        firstName: '',
        lastName: '',
        username: '',
        city: '',
        state: '',
        DOB: ''
      }}
    >
      {({ handleSubmit, handleChange, values, touched, errors }) => (
        <Form  onSubmit={handleSubmit}>
          <Row className="mb-3">
            <Form.Group as={Col} md="4" controlId="validationFormik01">
              <Form.Label>First name</Form.Label>
              <Form.Control
                type="text"
                name="firstName"
                value={values.firstName}
                onChange={handleChange}
                isValid={touched.firstName && !errors.firstName}
              />
              <Form.Control.Feedback>Looks good!</Form.Control.Feedback>
            </Form.Group>
            <Form.Group as={Col} md="4" controlId="validationFormik02">
              <Form.Label>Last name</Form.Label>
              <Form.Control
                type="text"
                name="lastName"
                value={values.lastName}
                onChange={handleChange}
                isValid={touched.lastName && !errors.lastName}
              />

              <Form.Control.Feedback>Looks good!</Form.Control.Feedback>
            </Form.Group>
            <Form.Group as={Col} md="4" controlId="validationFormikUsername">
              <Form.Label>Username</Form.Label>
              <InputGroup hasValidation>
                <InputGroup.Text id="inputGroupPrepend">@</InputGroup.Text>
                <Form.Control
                  type="text"
                  placeholder="Username"
                  aria-describedby="inputGroupPrepend"
                  name="username"
                  value={values.username}
                  onChange={handleChange}
                  isInvalid={!!errors.username}
                />
                <Form.Control.Feedback type="invalid">
                  {errors.username}
                </Form.Control.Feedback>
              </InputGroup>
            </Form.Group>
          </Row>
          <Row className="mb-3">
            <Form.Group as={Col} md="6" controlId="validationFormik03">
              <Form.Label>City</Form.Label>
              <Form.Control
                type="text"
                placeholder="City"
                name="city"
                value={values.city}
                onChange={handleChange}
                isInvalid={!!errors.city}
              />

              <Form.Control.Feedback type="invalid">
                {errors.city}
              </Form.Control.Feedback>
            </Form.Group>
            <Form.Group as={Col} md="3" controlId="validationFormik04">
              <Form.Label>State</Form.Label>
              <Form.Control
                type="text"
                placeholder="State"
                name="state"
                value={values.state}
                onChange={handleChange}
                isInvalid={!!errors.state}
              />
              <Form.Control.Feedback type="invalid">
                {errors.state}
              </Form.Control.Feedback>
            </Form.Group>
            <Form.Group as={Col} md="3" controlId="validationFormik05">
              <Form.Label>Date of birth</Form.Label>
              <Form.Control
                type="text"
                placeholder="DOB"
                name="DOB"
                value={values.DOB}
                onChange={handleChange}
                isInvalid={!!errors.DOB}
              />

              <Form.Control.Feedback type="invalid">
                {errors.DOB}
              </Form.Control.Feedback>
            </Form.Group>
          </Row>
          <Button type="submit">Submit form</Button>
        </Form>
      )}
    </Formik>
    <Table striped bordered hover>
        <thead>
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>User Name</th>
                <th>City</th>
                <th>State</th>
                <th>Date of Birth</th>
                <th>Delete</th>
                <th>Edit</th>
            </tr>    
        </thead>
        <tbody key="tbody">
            {FormRow}
        </tbody> 
    </Table>
    </div>

  );
}

export default FormExample;